#!/usr/bin/env bash


# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac


if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;


prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    git rev-parse --is-inside-work-tree &>/dev/null || return;

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'true' ]; then
        return;
    fi;

    # Check for what branch we’re on.
    # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
    # tracking remote branch or tag. Otherwise, get the
    # short SHA for the latest commit, or give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    # Ensure the index is up to date.
    git update-index --really-refresh -q &>/dev/null;

    # Check for uncommitted changes in the index.
    if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
    fi;
    # Check for unstaged changes.
    if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
    fi;
    # Check for untracked files.
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
    fi;
    # Check for stashed files.
    if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
    fi;

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${2}${s}";
}


# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${orange}";
fi;

# Multiline prompt
if [ "$color_prompt" = yes ]; then
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h in \w\a\]"; # windows title
    PS1+='${debian_chroot:+($debian_chroot)}';
    PS1+='\[${bold}\]';
    PS1+='\[${userStyle}\]\u@\h';
    PS1+='\[${white}\] in ';
    PS1+='\[${green}\]\w';
    PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")"; # Git repository details
    PS1+='\n';
    PS1+='\[${white}\]\$ \[${reset}\]';
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ ';
fi


unset color_prompt
