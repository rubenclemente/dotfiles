#!/usr/bin/env bash

# FUNCTIONS:

# GITHUB_USER is declared in the '.env' file.


function list-functions() {
    grep -E '^function\s+[a-zA-Z_-][a-zA-Z0-9_-]*\s*\(\)\s*{' ".functions" | awk '{print ">> " $2}'
}

function start() {
    nohup $1 &> /dev/null & disown;
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

#
# GIT functions
#
function git-set-config() {
    git config --list

    echo "Enter Git fullname:"
    read USER_NAME
    echo "Requesting root permissions to set git config at system level..."
    sudo git config --system user.name $USER_NAME

    echo "Enter Git email address:"
    read USER_EMAIL
    echo "Requesting root permissions to set git config at system level..."
    sudo git config --system user.email $USER_EMAIL

    git config --list
}

function git-init-repo() {
    if [[ -z "$1" ]]; then
        echo "Repository name is empty."
        return;
    fi;

    echo "Github User is [$GITHUB_USER]"
    echo "Repository name is [$1]"
    echo "Press Enter to continue..."
    read

    echo "git init -b main"
    git init -b main

    echo "git add ."
    git add .

    echo "git commit -m \"First commit\""
    git commit -m "First commit"

    echo "git remote add origin git@github.com:$GITHUB_USER/$1.git"
    git remote add origin git@github.com:$GITHUB_USER/$1.git

    echo "git remote -v"
    git remote -v

    echo "git push -u origin main"
    git push -u origin main

    echo "Success."
}

function show-env() {
    echo ">> GITHUB_USER = $GITHUB_USER"
    echo ">> BASE_PATH   = $BASE_PATH"
    echo ">> MVN_HOME    = $MVN_HOME"
    echo ">> JAVA_HOME   = $JAVA_HOME"
    echo ">> PATH        = $PATH"
}

function set-permissions() {
    # set-permissions /path/to/your/folder  >> absolute path
    # set-permissions folder                >> relative path
    # set-permissions .                     >> current folder

    folder="$1"

    # Check if the folder path is relative or absolute
    if [[ "$folder" != /* ]]; then
        # If it's a relative path, prepend the current working directory
        folder="$(pwd)/$folder"
    fi

    # Check if the folder exists
    if [ -d "$folder" ]; then
        
        pushd "$folder" > /dev/null || exit

        # Set permissions for directories (755)
        find . -type d -print0 | xargs -0 chmod 755

        # Set permissions for files (644)
        find . -type f -print0 | xargs -0 chmod 644

        # Make .sh files executable
        find . -type f -iname "*.sh" -exec chmod +x {} \;

        popd > /dev/null || exit

        echo "Permissions have been set for the folder: $folder"
    else
        echo "Folder does not exist: $folder"
        return 1
    fi
}

function create-desktop-entry() {
    echo "Enter the name of the application (e.g., MyApp):"
    read -r app_name

    echo "Enter the full path to the executable (e.g., /usr/bin/myapp or /opt/myapp/bin/start.sh):"
    read -r exec_path

    echo "Enter the path for the application icon (e.g., /usr/share/icons/myapp.png or just 'myapp' if in icon theme):"
    read -r icon_path

    #echo "Does the application run in a terminal? (true/false)"
    #read -r terminal_option
    terminal_option=false

    desktop_path="$HOME/Desktop"

    # Convert app name to lowercase
    lower_app_name=$(echo "$app_name" | tr '[:upper:]' '[:lower:]')

    # Create the content for the .desktop file
    desktop_entry_content="[Desktop Entry]
Encoding=UTF-8
Name=$app_name
Comment=$app_name
GenericName=$app_name
Exec=$exec_path
Icon=$icon_path
Terminal=$terminal_option
X-MultipleArgs=false
Type=Application
Version=1.0
StartupNotify=true"

    # Create the .desktop file on the Desktop
    desktop_file="$desktop_path/${lower_app_name}.desktop"

    # Write the content to the file
    echo "$desktop_entry_content" > "$desktop_file"

    # Make the .desktop file executable
    chmod +x "$desktop_file"

    echo "Desktop entry for $app_name created at $desktop_file"
}

function show-ports() {
    sudo ss -tulpn | grep LISTEN
}
